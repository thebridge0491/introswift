import Foundation

//import Toml
//import Yaml
import TOMLDecoder
import Yams

import class {{parentcap}}{{^parentcap}}Introswift{{/parentcap}}{{joiner}}{{^joiner}}_{{/joiner}}{{projectcap}}{{^projectcap}}Util{{/projectcap}}.{{projectcap}}{{^projectcap}}Util{{/projectcap}}

func deserializeStr(_ dataStr:String?, _ dataFmt:String) -> Dictionary<String, Any> {
    var blankDict:[String: Any] = ["fmt": dataFmt]
    
    if "yaml" == dataFmt || "json" == dataFmt {
        blankDict.merge(try! Yams.load(yaml: dataStr ?? "") as! [String: Any]) { (_, new) in new }
    } else if "toml" == dataFmt {
        blankDict.merge(try! TOMLDecoder.tomlTable(from: dataStr ?? "")) { (_, new) in new }
    } /*else if "json" == dataFmt {
        blankDict.merge(try! Util.readJSONObject(dataStr ?? "{}") as! [String: Any]) { (_, new) in new }
    }*/
    return blankDict
}

/** Run method.

 - todo: complete function
 - author: {{author}}{{^author}}{{repoacct}}{{^repoacct}}imcomputer{{/repoacct}}{{/author}}
 - version: {{version}}{{^version}}0.1.0{{/version}}

// - parameter progname: program name
 - parameters:
    - progname: program name
    - name: user's name

 - returns: n/a */
func run{{projectcap}}{{^projectcap}}Util{{/projectcap}}(_ progname:String, _ name:String) {
    do {
        let re = try NSRegularExpression(pattern:"^(?i)quit$",
			options: NSRegularExpression.Options.init(rawValue:0))
        let match = re.firstMatch(in:name, options:
			NSRegularExpression.MatchingOptions.init(rawValue:0),
			range: NSMakeRange(0, name.lengthOfBytes(
			using:String.Encoding.utf8)))
        print("\(match != nil ? "Good" : "Does not") match: \(name) to " +
			"\(re.pattern)")
    } catch let error {
        print(error.localizedDescription)
    }
}

func printUsage(_ progname:String) {
    print("Usage: \(progname) [-u USER][-?|-h]")
}

func parseCmdopts(_ argv:Array<String>) -> Dictionary<String, Any> {
    let options = UserDefaults.standard
    options.register(defaults: ["u":"World"])
    NSLog("info [\(#function):\(#line)] - parse_cmdopts:argv:")

    var (i, opts) = (0, options.dictionaryRepresentation())
    while i < argv.count {
        let str = argv[i].trimmingCharacters(in:CharacterSet(charactersIn:
			"- \n") as CharacterSet)
        switch (str.first! as Character) {
        case "u":
			opts["u"] = argv[i + 1] ; i = i + 1
        case "h":
            printUsage(argv[0])
            exit(0) //Thread.exit()
            break

        default:
            break
        }
        i = i + 1
    }
    return opts
}

public func main() {
	let argv = CommandLine.arguments
	//let rsrcPath = "\(FileManager.default.currentDirectoryPath)/Resources"
	let rsrcPath = ProcessInfo.processInfo.environment["RSRC_PATH"] ?? "Resources"
    let options = parseCmdopts(argv)
    var tupArr:[[String]] = []

    let jsonStr = Util.getTextFmFile("\(rsrcPath)/prac.json")
	let jsonObj = deserializeStr(jsonStr, "json")
	let jsonUser1Dict = jsonObj["user1", default:["name": "???"]] as! [String: Any?]
	
    let tomlStr = Util.getTextFmFile("\(rsrcPath)/prac.toml")
	let tomlObj = deserializeStr(tomlStr, "toml")
	let tomlUser1Dict = tomlObj["user1", default:["name": "???"]] as! [String: Any?]
	//if let tomlObj0 = try? Toml(withString: tomlStr ?? "") {
	//    var user1Dict = try? tomlObj0.value("user1") ?? ["name": "???"]
	//    tupArr += [["\(tomlObj0)"
	//        , "\(nil != tomlObj0 ? tomlObj0.string("domain") : "???")",
	//		"\(nil != user1Dict ? user1Dict?["name"]! : "???")"]]
	//}
    
    let yamlStr = Util.getTextFmFile("\(rsrcPath)/prac.yaml")
	let yamlObj = deserializeStr(yamlStr, "yaml")
	let yamlUser1Dict = yamlObj["user1", default:["name": "???"]] as! [String: Any?]
	//if let yamlObj0 = try? Yaml.load(yamlStr ?? "") {
	//    var user1Dict = yamlObj0["user1"] ?? ["name": "???"]
	//    tupArr += [["\(yamlObj0.dictionary ?? [:])"
	//        , "\(nil != yamlObj0.dictionary ? yamlObj0["domain"].string! : "???")",
	//		"\(nil != user1Dict.dictionary ? user1Dict["name"].string! : "???")"]]
	//}
	
    tupArr += [
        ["\(jsonObj)", "\(jsonObj["domain", default:"???"] as! String)"
        , "\(jsonUser1Dict["name"] as! String)"]
		, ["\(tomlObj)", "\(tomlObj["domain", default:"???"] as! String)"
		, "\(tomlUser1Dict["name"] as! String)"]
		, ["\(yamlObj)", "\(yamlObj["domain", default:"???"] as! String)"
		, "\(yamlUser1Dict["name"] as! String)"]
	]
	for elem in tupArr {
		print("\nconfig: \(elem[0])")
		print("domain: \(elem[1])")
		print("user1Name: \(elem[2])")
	}

    run{{projectcap}}{{^projectcap}}Util{{/projectcap}}(argv[0], "\(options["u"]!)")
}

main()
